# Ruff Configuration - 2025 Master Setup

[tool.ruff]
# Python version compatibility
target-version = "py312"
line-length = 88
indent-width = 4

# File patterns to exclude
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg",
    ".ipynb_checkpoints", ".mypy_cache", ".nox", ".pants.d",
    ".pyenv", ".pytest_cache", ".pytype", ".ruff_cache", ".svn",
    ".tox", ".venv", ".vscode", "__pypackages__", "_build",
    "buck-out", "build", "dist", "node_modules", "site-packages",
    "venv", "migrations", "alembic/versions"
]

[tool.ruff.lint]
# Enable comprehensive rule set for master-level Python
select = [
    # Pyflakes
    "F",
    # Pycodestyle
    "E", "W",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle  
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-annotations
    "ANN",
    # flake8-bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-boolean-trap
    "FBT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-debugger
    "T10",
    # flake8-errmsg
    "EM",
    # flake8-executable
    "EXE",
    # flake8-future-annotations
    "FA",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pyi
    "PYI",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-return
    "RET",
    # flake8-self
    "SLF",
    # flake8-slots
    "SLOT",
    # flake8-simplify
    "SIM",
    # flake8-tidy-imports
    "TID",
    # flake8-type-checking
    "TCH",
    # flake8-gettext
    "INT",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # eradicate
    "ERA",
    # pandas-vet
    "PD",
    # pygrep-hooks
    "PGH",
    # Pylint
    "PL",
    # tryceratops
    "TRY",
    # flynt
    "FLY",
    # NumPy-specific rules
    "NPY",
    # Perflint
    "PERF",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    # Allow missing docstrings for private methods
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class  
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    
    # Type annotation exceptions
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for cls in classmethod
    "ANN401", # Dynamically typed expressions (Any) are disallowed
    
    # Allow assert statements in tests
    "S101",
    
    # Allow boolean positional arguments (common pattern)
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "FBT003", # Boolean positional value in function call
    
    # Allow print statements (useful for debugging/CLIs)
    "T201",
    
    # Allow TODO comments
    "FIX002",
    
    # Pylint rules that are too strict for most projects
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value used in comparison
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    
    # Allow star imports in __init__.py files
    "F403",
    "F405",
    
    # Allow line-too-long for URLs and long strings
    "E501",
]

# Allow autofix for all enabled rules when --fix is provided
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use assert statements and have more relaxed rules
"tests/**/*" = [
    "S101",     # Use of assert detected
    "PLR2004",  # Magic value used in comparison
    "TID252",   # Relative imports from parent modules are banned
    "ANN001",   # Missing type annotation for function argument
    "ANN201",   # Missing return type annotation for public function
    "D100",     # Missing docstring in public module
    "D103",     # Missing docstring in public function
]

# Migration files should be excluded from most rules
"**/migrations/*" = ["ALL"]
"**/alembic/versions/*" = ["ALL"]

# Scripts and one-off files can be more relaxed
"scripts/**/*" = [
    "T201",     # print found
    "S603",     # subprocess call: check for execution of untrusted input
    "PLR2004",  # Magic value used in comparison
]

# Configuration files
"conftest.py" = ["D100", "D103"]
"setup.py" = ["D100"]
"**/settings/**/*" = ["S105", "S106"]  # Hardcoded passwords

[tool.ruff.lint.mccabe]
# Cyclomatic complexity
max-complexity = 10

[tool.ruff.lint.pydocstyle]
# Use Google docstring convention
convention = "google"

[tool.ruff.lint.pylint]
# Pylint-specific configuration
max-args = 5
max-branches = 12
max-returns = 6
max-statements = 50
max-public-methods = 20
max-locals = 15
max-bool-expr = 5

[tool.ruff.lint.isort]
# Import sorting configuration
combine-as-imports = true
force-wrap-aliases = true
split-on-trailing-comma = true
known-first-party = ["myapp"]  # Replace with your project name
known-local-folder = ["src"]

# Import sections
section-order = [
    "future",
    "standard-library", 
    "third-party",
    "first-party",
    "local-folder"
]

[tool.ruff.lint.flake8-annotations]
# Type annotations configuration
allow-star-arg-any = true
ignore-fully-untyped = true

[tool.ruff.lint.flake8-bandit]
# Security rules configuration
check-typed-exception = true

[tool.ruff.lint.flake8-bugbear]
# Extend immutable calls with custom types
extend-immutable-calls = [
    "chr",
    "typer.Argument", 
    "typer.Option",
    "fastapi.Depends",
    "fastapi.Query",
    "fastapi.Header"
]

[tool.ruff.lint.flake8-builtins]
# Allow shadowing builtins in specific contexts
builtins-ignorelist = ["id", "type", "filter", "format"]

[tool.ruff.lint.flake8-comprehensions]
# List/dict comprehension rules
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-pytest-style]
# Pytest-specific rules
fixture-parentheses = false
parametrize-names-type = "tuple"
parametrize-values-type = "tuple"
parametrize-values-row-type = "tuple"
raises-require-match-for = [
    "builtins.ValueError",
    "builtins.TypeError",
    "builtins.KeyError"
]

[tool.ruff.lint.flake8-quotes]
# Quote style configuration
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
# Tidy imports configuration
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
# Type checking imports
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "sqlalchemy.orm.DeclarativeBase"
]

[tool.ruff.format]
# Formatting options
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"
